{
  "info": {
    "_postman_id": "0cd0419b-91a4-420f-82b0-405f9aa61721",
    "name": "Reddit API",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Genrate Access Token",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "69a92831-b68a-4506-9ef0-5032e9614aed",
            "exec": [
              "//auth details at collection level",
              "let authObj = pm.response.json().auth;",
              "//request array",
              "let requestArr = pm.response.json().item[0].item;",
              "//mock array ",
              "let mockArr = pm.response.json().item[1].item;",
              "//checks array",
              "let checksArr = pm.response.json().item[2].item;",
              "",
              "//info",
              "pm.test(\"Once all of your tests are passing, save your collection, update the link via the Share flow, and submit it: bit.ly/student-expert-submission\", () =>{",
              "    pm.expect(true).to.eql(true);",
              "})",
              "",
              "//used auth",
              "pm.test(\"Authorized requests\", () => {",
              "    pm.expect(authObj).to.be.an(\"object\");",
              "    pm.expect(authObj).to.have.property(\"apikey\"); ",
              "    console.log(authObj);",
              "});",
              "",
              "//used all required methods",
              "pm.test(\"Used GET, POST, PUT, DELETE methods\", () => {",
              "    //first folder should have all methods in requests",
              "    let methArr = requestArr.map(value => value.request.method); ",
              "    console.log(methArr);",
              "    pm.expect(methArr).to.include.members([\"GET\", \"POST\", \"PUT\", \"DELETE\"]);",
              "});",
              "",
              "//used params - query and path",
              "pm.test(\"Used query and path parameters\", () => {",
              "    //first folder should have query",
              "    let queryArr = requestArr.filter(value => value.request.url.query).map(value => value.request.url.query);",
              "    console.log(queryArr);",
              "    pm.expect(queryArr).to.have.length.of.above(0);",
              "    //first folder should also have path",
              "    let pathArr = requestArr.filter(value => value.request.url.path).map(value => value.request.url.path);",
              "    var pathParams = pathArr.flat().filter(p => p.startsWith(':')); ",
              "    console.log(pathParams);",
              "    pm.expect(pathParams).to.have.length.of.above(0);",
              "});",
              "",
              "//sent body",
              "pm.test(\"Sent body data\", () => {",
              "    //first folder should have a body",
              "    let bodyArr = requestArr.filter(value => value.request.body).map(value => value.request.body); ",
              "    console.log(bodyArr);",
              "    pm.expect(bodyArr).to.have.length.of.above(0);",
              "});",
              "",
              "//used vars (can currently only check env with run output - future enhancement - atm check set env var from script)",
              "pm.test(\"Used variables\", () => {",
              "    //should be a var reference in query param for mock folder",
              "    let varsArr = mockArr.filter(value => value.request.url.query).map(value => value.request.url.query);",
              "    let queries = varsArr.flat().filter(value => value.value).map(value => value.value);",
              "    var queryVars = queries.filter(p => encodeURI(p).indexOf('%7B%7B')>-1); ",
              "    console.log(queryVars);",
              "    pm.expect(queryVars).to.have.length.of.above(0);",
              "    //base path for main folder should also use var",
              "    //url is object when path or query param, string otherwise",
              "    let addresses = requestArr.filter(value => value.request.url.raw ? value.request.url.raw : value.request.url).map(value => value.request.url.raw ? value.request.url.raw : value.request.url);",
              "    var addressVars = addresses.filter(p => encodeURI(p).indexOf('%7B%7B')>-1); ",
              "    console.log(addressVars);",
              "    pm.expect(addressVars).to.have.length.of.above(0);",
              "    //auth should also use var",
              "    pm.expect(encodeURI(authObj.apikey.value).indexOf('%7B%7B')).to.be.above(-1);",
              "",
              "});",
              "",
              "//assed description",
              "pm.test(\"Added request description\", () => {",
              "    //second folder should have a description",
              "    let descArr = mockArr.filter(value => value.request.description).map(value => value.request.description);",
              "    console.log(descArr);",
              "    pm.expect(descArr).to.have.length.of.above(0);",
              "});",
              "",
              "//set var from script and next request - make it env var so we check that too",
              "pm.test(\"Set env variable from script and set next request\", () => {",
              "    //second folder should have set var and next req",
              "    let testsArr = mockArr.filter(value => value.event).map(value => value.event); ",
              "    console.log(testsArr);",
              "    let execArr = testsArr.flat().filter(value => value.script.exec).map(value => value.script.exec); ",
              "    var setsVars = execArr.flat().filter(p => p.indexOf('environment.set(')>-1); ",
              "    console.log(setsVars);",
              "    pm.expect(setsVars).to.have.length.of.above(0);",
              "    var setsReqs = execArr.flat().filter(p => p.indexOf('.setNextRequest')>-1); ",
              "    console.log(setsReqs);",
              "    pm.expect(setsReqs).to.have.length.of.above(0);",
              "});",
              "//add skill check test",
              "pm.test('Skills checked', () =>{",
              "    var vars = pm.response.json().variable.map(value => value.key);",
              "    pm.expect(vars).to.include('skilled');",
              "    pm.expect(pm.collectionVariables.get('skilled')).to.be.not.undefined;",
              "    pm.expect(pm.collectionVariables.get('skilled')).to.eql(true);",
              "});",
              "//check pulled response property",
              "pm.test('Skill check code retrieving set var value from response property', () => {",
              "    //need to make sure set var from response json in skill check request - third folder",
              "        //need to make sure set var from response json in skill check request - third folder",
              "    pm.expect(JSON.stringify(checksArr[0].event[0].script).indexOf('.rand')).to.be.greaterThan(-1);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "_postman_id": "37a8aed2-140f-49b9-8806-4f5719f8ffdd",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "basic",
          "basic": {
            "password": "Ow4J5i2Pqg1PF1yLUJh5PlSFoVIrWQ",
            "username": "NdRI9HtKIDnJjg"
          }
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "value": "application/x-www-form-urlencoded",
            "type": "text"
          }
        ],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "username",
              "value": "dipali_sable03",
              "type": "text"
            },
            {
              "key": "password",
              "value": "Dipali@123",
              "type": "text"
            },
            {
              "key": "grant_type",
              "value": "password",
              "type": "text"
            }
          ],
          "options": {
            "urlencoded": {}
          }
        },
        "url": "https://www.reddit.com/api/v1/access_token"
      },
      "response": []
    }
  ]
}